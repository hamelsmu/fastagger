# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['AlreadyImportedError', 'InvalidFilePath', 'InvalidFolderPath', 'InvalidFileExtension', 'Pdf']

# Cell
import os
from pdf2image import convert_from_path

# Cell

class AlreadyImportedError(Exception):
    pass

class InvalidFilePath(Exception):
    pass

class InvalidFolderPath(Exception):
    pass

class InvalidFileExtension(Exception):
    pass

class Pdf:
    """Entity that deals with pdf
    """
    def __init__(self, path):
        if self.getPathType(path) != 'file':
            raise InvalidFilePath('Invalid file path', path)
        if not path.endswith('.pdf'):
            raise InvalidFileExtension('File must be pdf', path)
        self.path = path
        self.name = os.path.basename(self.path)
        self.steamName = os.path.splitext(self.name)[0]

    def load(self, outputFolder, dpi=200, grayscale=True, size=(600, 846)):
        """Loads pdf images pages to output folder
        """

        outputFolder = outputFolder +'/'+ self.steamName

        if os.path.exists(outputFolder):
            raise AlreadyImportedError('Pdf already imported: ',self.path)
        metadata = {self.steamName: {}}
        try:
            pages = convert_from_path(self.path, dpi=200, grayscale=True, size=(600, 846))
        except:
            raise Exception("Could not convert from path: ", self.path)

        metadata[self.steamName]['path'] = outputFolder
        metadata[self.steamName]['pages'] = dict([(x,0) for x in range(1,len(pages)+1)])

        try:
            os.mkdir(outputFolder)
        except OSError:
            raise Exception("Could not create folder: ", outputFolder)

        for idx, page in enumerate(pages):
            try:
                page.save(outputFolder+'/'+str(self.steamName)+'_'+str(idx+1)+'.png', 'PNG')
            except OSError:
                raise Exception("Could not save file:", outputFolder+'/'+self.steamName+'_'+str(idx+1)+'.png')
        return metadata

    def bulkLoad(path, outputFolder, dpi=200, grayscale=True, size=(600, 846)):
        """From every pdf in the path folder, loads theirs image pages to the output folder
        """
        filesMetadata = {}
        if Pdf.getPathType(path) == 'folder':
            for root, d_names, f_names in os.walk(path):
                for f in f_names:
                    try:
                        pdf = Pdf(os.path.join(root, f))
                        metadata = pdf.load(outputFolder, dpi, grayscale, size)
                        filesMetadata.update(metadata)
                    except Exception as e:
                        continue
            return filesMetadata
        else:
            raise InvalidFolderPath('Invalid folder')

    @staticmethod
    def getPathType(path):
        """Get the kind of the supplied path
        """

        if os.path.isdir(path):
            return "folder"
        elif os.path.isfile(path):
            return "file"
        else:
            return None